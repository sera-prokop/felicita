/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-name: 'arrow';
$arrow-x: 0px;
$arrow-y: 33px;
$arrow-offset-x: 0px;
$arrow-offset-y: -33px;
$arrow-width: 12px;
$arrow-height: 3px;
$arrow-total-width: 55px;
$arrow-total-height: 36px;
$arrow-image: '../images/sprite.png';
$arrow: (0px, 33px, 0px, -33px, 12px, 3px, 55px, 36px, '../images/sprite.png', 'arrow', );
$cross-name: 'cross';
$cross-x: 44px;
$cross-y: 0px;
$cross-offset-x: -44px;
$cross-offset-y: 0px;
$cross-width: 11px;
$cross-height: 11px;
$cross-total-width: 55px;
$cross-total-height: 36px;
$cross-image: '../images/sprite.png';
$cross: (44px, 0px, -44px, 0px, 11px, 11px, 55px, 36px, '../images/sprite.png', 'cross', );
$left-arr-name: 'left-arr';
$left-arr-x: 0px;
$left-arr-y: 0px;
$left-arr-offset-x: 0px;
$left-arr-offset-y: 0px;
$left-arr-width: 12px;
$left-arr-height: 23px;
$left-arr-total-width: 55px;
$left-arr-total-height: 36px;
$left-arr-image: '../images/sprite.png';
$left-arr: (0px, 0px, 0px, 0px, 12px, 23px, 55px, 36px, '../images/sprite.png', 'left-arr', );
$right-arr-name: 'right-arr';
$right-arr-x: 22px;
$right-arr-y: 0px;
$right-arr-offset-x: -22px;
$right-arr-offset-y: 0px;
$right-arr-width: 12px;
$right-arr-height: 23px;
$right-arr-total-width: 55px;
$right-arr-total-height: 36px;
$right-arr-image: '../images/sprite.png';
$right-arr: (22px, 0px, -22px, 0px, 12px, 23px, 55px, 36px, '../images/sprite.png', 'right-arr', );
$spritesheet-width: 55px;
$spritesheet-height: 36px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($arrow, $cross, $left-arr, $right-arr, );
$spritesheet: (55px, 36px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
