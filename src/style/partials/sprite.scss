/*
SCSS variables are information about icon's compiled state, stored under its original file name

.icon-home {
  width: $icon-home-width;
}

The large array-like variables contain all information about a single icon
$icon-home: x y offset_x offset_y width height total_width total_height image_path;

At the bottom of this section, we provide information about the spritesheet itself
$spritesheet: width height image $spritesheet-sprites;
*/
$arrow-name: 'arrow';
$arrow-x: 100px;
$arrow-y: 83px;
$arrow-offset-x: -100px;
$arrow-offset-y: -83px;
$arrow-width: 12px;
$arrow-height: 3px;
$arrow-total-width: 140px;
$arrow-total-height: 113px;
$arrow-image: '../images/sprite.png';
$arrow: (100px, 83px, -100px, -83px, 12px, 3px, 140px, 113px, '../images/sprite.png', 'arrow', );
$cross-name: 'cross';
$cross-x: 27px;
$cross-y: 100px;
$cross-offset-x: -27px;
$cross-offset-y: -100px;
$cross-width: 11px;
$cross-height: 11px;
$cross-total-width: 140px;
$cross-total-height: 113px;
$cross-image: '../images/sprite.png';
$cross: (27px, 100px, -27px, -100px, 11px, 11px, 140px, 113px, '../images/sprite.png', 'cross', );
$fb-name: 'fb';
$fb-x: 0px;
$fb-y: 0px;
$fb-offset-x: 0px;
$fb-offset-y: 0px;
$fb-width: 40px;
$fb-height: 40px;
$fb-total-width: 140px;
$fb-total-height: 113px;
$fb-image: '../images/sprite.png';
$fb: (0px, 0px, 0px, 0px, 40px, 40px, 140px, 113px, '../images/sprite.png', 'fb', );
$googl-name: 'googl';
$googl-x: 50px;
$googl-y: 0px;
$googl-offset-x: -50px;
$googl-offset-y: 0px;
$googl-width: 40px;
$googl-height: 40px;
$googl-total-width: 140px;
$googl-total-height: 113px;
$googl-image: '../images/sprite.png';
$googl: (50px, 0px, -50px, 0px, 40px, 40px, 140px, 113px, '../images/sprite.png', 'googl', );
$inst-name: 'inst';
$inst-x: 0px;
$inst-y: 50px;
$inst-offset-x: 0px;
$inst-offset-y: -50px;
$inst-width: 40px;
$inst-height: 40px;
$inst-total-width: 140px;
$inst-total-height: 113px;
$inst-image: '../images/sprite.png';
$inst: (0px, 50px, 0px, -50px, 40px, 40px, 140px, 113px, '../images/sprite.png', 'inst', );
$left-arr-name: 'left-arr';
$left-arr-x: 100px;
$left-arr-y: 50px;
$left-arr-offset-x: -100px;
$left-arr-offset-y: -50px;
$left-arr-width: 12px;
$left-arr-height: 23px;
$left-arr-total-width: 140px;
$left-arr-total-height: 113px;
$left-arr-image: '../images/sprite.png';
$left-arr: (100px, 50px, -100px, -50px, 12px, 23px, 140px, 113px, '../images/sprite.png', 'left-arr', );
$right-arr-name: 'right-arr';
$right-arr-x: 122px;
$right-arr-y: 50px;
$right-arr-offset-x: -122px;
$right-arr-offset-y: -50px;
$right-arr-width: 12px;
$right-arr-height: 23px;
$right-arr-total-width: 140px;
$right-arr-total-height: 113px;
$right-arr-image: '../images/sprite.png';
$right-arr: (122px, 50px, -122px, -50px, 12px, 23px, 140px, 113px, '../images/sprite.png', 'right-arr', );
$tw-name: 'tw';
$tw-x: 50px;
$tw-y: 50px;
$tw-offset-x: -50px;
$tw-offset-y: -50px;
$tw-width: 40px;
$tw-height: 40px;
$tw-total-width: 140px;
$tw-total-height: 113px;
$tw-image: '../images/sprite.png';
$tw: (50px, 50px, -50px, -50px, 40px, 40px, 140px, 113px, '../images/sprite.png', 'tw', );
$tweet-name: 'tweet';
$tweet-x: 0px;
$tweet-y: 100px;
$tweet-offset-x: 0px;
$tweet-offset-y: -100px;
$tweet-width: 17px;
$tweet-height: 13px;
$tweet-total-width: 140px;
$tweet-total-height: 113px;
$tweet-image: '../images/sprite.png';
$tweet: (0px, 100px, 0px, -100px, 17px, 13px, 140px, 113px, '../images/sprite.png', 'tweet', );
$yout-name: 'yout';
$yout-x: 100px;
$yout-y: 0px;
$yout-offset-x: -100px;
$yout-offset-y: 0px;
$yout-width: 40px;
$yout-height: 40px;
$yout-total-width: 140px;
$yout-total-height: 113px;
$yout-image: '../images/sprite.png';
$yout: (100px, 0px, -100px, 0px, 40px, 40px, 140px, 113px, '../images/sprite.png', 'yout', );
$spritesheet-width: 140px;
$spritesheet-height: 113px;
$spritesheet-image: '../images/sprite.png';
$spritesheet-sprites: ($arrow, $cross, $fb, $googl, $inst, $left-arr, $right-arr, $tw, $tweet, $yout, );
$spritesheet: (140px, 113px, '../images/sprite.png', $spritesheet-sprites, );

/*
The provided mixins are intended to be used with the array-like variables

.icon-home {
  @include sprite-width($icon-home);
}

.icon-email {
  @include sprite($icon-email);
}

Example usage in HTML:

`display: block` sprite:
<div class="icon-home"></div>

To change `display` (e.g. `display: inline-block;`), we suggest using a common CSS class:

// CSS
.icon {
  display: inline-block;
}

// HTML
<i class="icon icon-home"></i>
*/
@mixin sprite-width($sprite) {
  width: nth($sprite, 5);
}

@mixin sprite-height($sprite) {
  height: nth($sprite, 6);
}

@mixin sprite-position($sprite) {
  $sprite-offset-x: nth($sprite, 3);
  $sprite-offset-y: nth($sprite, 4);
  background-position: $sprite-offset-x  $sprite-offset-y;
}

@mixin sprite-image($sprite) {
  $sprite-image: nth($sprite, 9);
  background-image: url(#{$sprite-image});
}

@mixin sprite($sprite) {
  @include sprite-image($sprite);
  @include sprite-position($sprite);
  @include sprite-width($sprite);
  @include sprite-height($sprite);
}

/*
The `sprites` mixin generates identical output to the CSS template
  but can be overridden inside of SCSS

@include sprites($spritesheet-sprites);
*/
@mixin sprites($sprites) {
  @each $sprite in $sprites {
    $sprite-name: nth($sprite, 10);
    .#{$sprite-name} {
      @include sprite($sprite);
    }
  }
}
